// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BMXCore
import Alamofire
import Foundation
import Japx
import OAuthSwift
import Swift
import UIKit
import os.log
import os
public enum PushNotificationToken {
  case voip(token: Swift.String)
  case alert(token: Swift.String)
}
public struct DeviceModel : Japx.JapxDecodable {
  public let type: Swift.String
  public let id: Swift.String
  public let token: Swift.String?
  public let voipToken: Swift.String?
  public let callNotificationPushType: Swift.String
  public let development: Swift.Bool
  public let locales: [Swift.String]?
  public let clientVersion: Swift.String
  public let description: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TenantModel : Japx.JapxCodable {
  public var id: Swift.String
  public var type: Swift.String
  public let unit: BMXCore.UnitModel?
  public let panels: [BMXCore.PanelModel]?
  public let building: BMXCore.BuildingModel?
  public var isOpenDoorEnabled: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class BMXDoor {
  public static let shared: BMXCore.BMXDoor
  public enum OpenDoorMethod : Swift.String {
    case frontDoorView
    case bluetooth
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public func openDoor(panel: BMXCore.PanelModel, tenant: BMXCore.TenantModel, method: BMXCore.BMXDoor.OpenDoorMethod = .frontDoorView, completion: @escaping (Swift.Result<Swift.Void, BMXCore.ServiceError>) -> Swift.Void)
  @objc deinit
}
public let environmentUpdateNotificationName: Foundation.Notification.Name
public protocol BMXEnvironmentProtocol {
  var backendEnvironment: BMXCore.BMXBackendEnvironment { get set }
  func getRegion() -> BMXCore.RegionType
  func save(region: BMXCore.RegionType)
}
final public class BMXEnvironment : BMXCore.BMXEnvironmentProtocol {
  final public func getRegion() -> BMXCore.RegionType
  final public func save(region: BMXCore.RegionType)
  final public var backendEnvironment: BMXCore.BMXBackendEnvironment {
    get
    set
  }
  public init(backendEnvironment: BMXCore.BMXBackendEnvironment)
  @objc deinit
}
public enum RegionType : Swift.String, Swift.Decodable {
  case eu, na
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol BMXCoreDelegate : AnyObject {
  func logging(_ data: Swift.String)
}
public enum ServiceError : Swift.Error {
  case unableToCreateRequest(message: Swift.String)
  case unableToProcessResponse(message: Swift.String)
  case runtime(error: Swift.Error)
}
@_hasMissingDesignatedInitializers public class BMXCoreKit {
  public static let shared: BMXCore.BMXCoreKit
  public var environment: BMXCore.BMXEnvironmentProtocol {
    get
  }
  weak public var delegate: BMXCore.BMXCoreDelegate?
  final public let authProvider: BMXCore.BMXAuthProvider
  public var isUserLoggedIn: Swift.Bool {
    get
  }
  public func log(format: Swift.StaticString = "%@", message: Swift.String, type: os.OSLogType = .info)
  public func configure(withEnvironment environment: BMXCore.BMXEnvironmentProtocol, logger: os.OSLog? = nil)
  public func handle(url: Foundation.URL)
  public func authorize(withAuthProvider authProvider: BMXCore.BMXAuthProvider, completion: @escaping (Swift.Result<BMXCore.UserModel, BMXCore.ServiceError>) -> Swift.Void)
  public func authorize(withAuthProvider authProvider: BMXCore.BMXAuthProvider, callbackURL: Foundation.URL?, viewController: UIKit.UIViewController?, completion: @escaping (Swift.Result<BMXCore.UserModel, BMXCore.ServiceError>) -> Swift.Void)
  public func logoutUser(completion: @escaping (Swift.Result<Swift.Void, BMXCore.ServiceError>) -> Swift.Void)
  public func registerDevice(with tokens: BMXCore.PushNotificationToken..., apnsSandbox: Swift.Bool, completion: @escaping (Swift.Result<BMXCore.DeviceModel, BMXCore.ServiceError>) -> Swift.Void)
  public func updateDevice(with tokens: BMXCore.PushNotificationToken..., apnsSandbox: Swift.Bool, completion: @escaping (Swift.Result<BMXCore.DeviceModel, BMXCore.ServiceError>) -> Swift.Void)
  @objc deinit
}
public struct UnitModel : Japx.JapxCodable {
  public var type: Swift.String
  public let id: Swift.String
  public let unitType: Swift.String?
  public let label: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class BMXUser {
  public static let shared: BMXCore.BMXUser
  public func getUser() -> BMXCore.UserModel?
  public func getTenants() -> [BMXCore.TenantModel]
  public func getPanels(from tenant: BMXCore.TenantModel) -> [BMXCore.PanelModel]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BMXAuthProvider {
  final public var accessToken: Swift.String? {
    get
  }
  final public var refreshToken: Swift.String? {
    get
  }
  final public var sipToken: Swift.String? {
    get
  }
  final public var sipUsername: Swift.String? {
    get
  }
  final public var secret: Swift.String? {
    get
  }
  final public var clientID: Swift.String? {
    get
  }
  final public var deviceID: Swift.String? {
    get
  }
  public init(secret: Swift.String, clientID: Swift.String)
  public init(secret: Swift.String, clientID: Swift.String, accessToken: Swift.String, refreshToken: Swift.String)
  @objc deinit
}
public enum BMXBackendEnvironment {
  case production
  case development
  case sandbox
  public var sipURI: Swift.String {
    get
  }
  public static func == (a: BMXCore.BMXBackendEnvironment, b: BMXCore.BMXBackendEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct UserModel : Japx.JapxCodable {
  public let type: Swift.String
  public let id: Swift.String
  public let name: Swift.String?
  public let email: Swift.String?
  public let phoneNumber: Swift.String?
  public let xmppUsername: Swift.String?
  public let contactPreference: Swift.String?
  public var avatars: [Swift.String : Swift.String?]? {
    get
  }
  public let tenants: [BMXCore.TenantModel]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PanelModel : Japx.JapxCodable {
  public let type: Swift.String
  public let id: Swift.String
  public let name: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BuildingModel : Japx.JapxCodable {
  public let id: Swift.String
  public let type: Swift.String
  public let openDoorButtonEnabled: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class APIClient {
  public class func getCallStatus(guid: Swift.String, successHandler: @escaping ((Foundation.Data) -> Swift.Void), errorHandler: @escaping ((Swift.Error) -> Swift.Void))
  public class func sendRequest(path: Swift.String, params: Alamofire.Parameters, method: Alamofire.HTTPMethod, completion: @escaping ((Swift.Result<Foundation.Data, Alamofire.AFError>) -> Swift.Void))
  @objc deinit
}
extension BMXCore.BMXDoor.OpenDoorMethod : Swift.Equatable {}
extension BMXCore.BMXDoor.OpenDoorMethod : Swift.Hashable {}
extension BMXCore.BMXDoor.OpenDoorMethod : Swift.RawRepresentable {}
extension BMXCore.RegionType : Swift.Equatable {}
extension BMXCore.RegionType : Swift.Hashable {}
extension BMXCore.RegionType : Swift.RawRepresentable {}
extension BMXCore.BMXBackendEnvironment : Swift.Equatable {}
extension BMXCore.BMXBackendEnvironment : Swift.Hashable {}
